# This is a basic workflow to help you get started with Actions

name: Check python code in PR

on:
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies and pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f ./code/requirements.txt ]; then pip install -r ./code/requirements.txt; fi

      - name: Testing python code
        id: pylint
        run: |
          echo ::set-output name=result::$(pylint ./code/*.py)

      - uses: brpaz/hadolint-action@v1.2.1
        id: hadolint
        continue-on-error: true
        with:
          dockerfile: Dockerfile

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PY_PLAN: "${{ steps.pylint.outputs.result }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Pylint test ðŸ–Œ\`${{ steps.pylint.outcome }}\`
            #### Hadolint test \`${{ steps.hadolint.outcome }}\`
            <details>
            <summary>Pylint Output</summary>\n
            \`\`\`sh\n${process.env.PY_PLAN}\n\`\`\`
            \n<summary>Hadolint Output</summary>\n
            \`\`\`sh\n${{ steps.hadolint.outputs }}\n\`\`\`
            </details>\n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Common Status
        if: steps.pylint.outcome == 'failure' || steps.hadolint.outcome == 'failure'
        run: exit 1

